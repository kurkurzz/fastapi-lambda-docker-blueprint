# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy it on AWS Lambda, when there is a push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Have already setup your lambda function and ecr repository
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's name.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `LAMBDA_FUNCTION_NAME` environment variable in the workflow below with your repository's region.

#
# 2. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to AWS Lambda

on:
  workflow_dispatch:
    branches:
      - master
  push:
    branches:
      - master

env:
  AWS_REGION: ap-southeast-1                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: repository-name               # set this to your Amazon ECR repository name (just name, not url)
  LAMBDA_FUNCTION_NAME: function-name           # set this to your Lambda function name
  S3_BUCKET: bucket-name                        # set this to your S3 Bucket

jobs:
  deploy:
    name: Deploy To AWS Lambda
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # relevant to project related to ml because you need to download to ml models from S3.
    # it's where you usually store your models.
    # else comment `Create Models Folder` and `Download ML Models from S3`
    - name: Create Models Folder
      run: |
        cd app
        mkdir models

    - name: Download ML Models from S3
      uses: keithweaver/aws-s3-github-action@v1.0.0
      with:
        command: cp
        source: s3://${{ env.S3_BUCKET }}/models/
        destination: ./app/models/
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ env.AWS_REGION }}
        flags: --recursive

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # build a docker container and push it to ECR
        # dont forget to specify the correct dockerfile!!!
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f Dockerfile.aws.lambda
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    ## steps above is to populate the ecr with an image
    ## lambda function can only be created by specifying an image

    - name: Update Lambda function
      id: update-function
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $IMAGE_URI
